Version Control: is a system that records changes to a file or set of files over time. VCS = Version Control System. 

Local VCS -> lives in a database inside a local machine. 
Centralized VCS -> lives in a single server that can be accesed by many collaborating clients. 
Distributed VCS -> clients mirror the remote repository. Every clone is a full backup. This is how git works. 

Git thinks of its data as a series of snapshots of a miniature file system. Every time you commit something, Git takes a picture of all your files. It only makes a copy of the files that have changed. 

Most operations in git are local. 

There are 3 states any file can reside in: 
	- Modified: you have changed the file but not yet commited to your local database.
	- Staged: you have marked a modified file in its current version to go into your next commit.
	- Commited: the file is already stored in the database in its current version.

Main sections of a Git proyect:
	- Working tree: single checkout of a version of the project, over which you can see and modify files. 
	- Staging area: file in your git directory that stores information about what's gonna be commited on your next commit (it's called 'index'). 
	- Git directory: where Git stores the metadata and object database for your project. It's what it's cloned when you clone c: 

Common commands:
	- status : shows the status of the directory files. 
	- log : shows history of commits.
		-p -> shows the difference between each commit
	- add
	- commit (-m) (-a)
	- rm (-f) (--cached): removes a file from your working directory and untracks it. 
		  (-f) forces the removal. 
		  (--cached) doesn't delete the file.
	- push 
	- diff : shows exactly what you changed and haven't staged (the exact lines)
	- mv : moves (or renames) the file and re-track it

Branches
	- branch <branch_name>  --> create new branch
	- checkout (-b) <branch_name>  --> move to branch
	- merge <branch_name>  --> takes the changes commited in branch_name and adds them to the current branch
	- branch -d <branch_name> --> deletes the branch (-D if it hasn't been merged into main)
		- to also delete the branch remotely: git push --delete origin <branch_name>
	- git push origin <branch_name>

-------------------------
[] Put an existing folder under version control with git: git init
[] .gitignore is the name of the file where you can put those files you don't want git to know about, using some rules to refer to the files:
		- # COMMENT
		- Standar glob patterns (simplified regular expressions used by shells)
			- * matches zero or more characters
			- [abc] matches any character inside brackets
			- ? matches a single character
			- [a-b-c] matches any character
		- / avoid recursivity on patterns
		- ! negate pattern

	Examples:
		- *.a  --> ignores all .a files
		- !lib.a --> specifically track this file
